#!/usr/bin/env bash
set -e

# Load job properties
source /var/vcap/jobs/es_config/data/properties.sh

# Setup env vars and folders for the ctl script
source /var/vcap/jobs/es_config/packages/bosh-helpers/setup.sh "es_config"

# Load function lib (alway before setup, there are some functions needed by the es_config lib)
source /var/vcap/jobs/es_config/packages/bosh-helpers/lib.sh

source /var/vcap/jobs/es_config/bin/lib.sh

<%
  url = ""
  if_p("elasticsearch_config.elasticsearch.endpoint") do |endpoint|
    url = endpoint
  end.else do
    elasticsearch_host = nil
    if_link("elasticsearch") { |elasticsearch_link| elasticsearch_host = elasticsearch_link.instances.first.address }
    unless elasticsearch_host
      elasticsearch_host = p("elasticsearch_config.elasticsearch.host")
    end
    elasticsearch_port = nil
    if_link("elasticsearch") { |elasticsearch_link| elasticsearch_port = elasticsearch_link.p("elasticsearch.port") }
    unless elasticsearch_port
      elasticsearch_port = p("elasticsearch_config.elasticsearch.port")
    end
    proto = p("elasticsearch_config.elasticsearch.proto", "http")
    url = "#{proto}://#{elasticsearch_host}:#{elasticsearch_port}/"
  end
%>
export ES_URL='<%= url %>'

<% if_p("elasticsearch_config.elasticsearch.auth") do |auth| %>
export ES_CONFIG_AUTH='<%= auth %>'
export ES_CONFIG_USER='<%= auth.split(":")[0] %>'
export ES_CONFIG_PASS='<%= auth.split(":")[1] %>'
<% end.else do %>
<% if_p("elasticsearch_config.elasticsearch.user") do |user| %>
export ES_CONFIG_AUTH='<%= user %>:<%= p("elasticsearch_config.elasticsearch.password", "") %>'
export ES_CONFIG_USER='<%= user %>'
export ES_CONFIG_PASS='<%= p("elasticsearch_config.elasticsearch.password", "") %>'
<% end.else do %>
export ES_CONFIG_AUTH=''
export ES_CONFIG_USER=''
export ES_CONFIG_PASS=''
<% end %>
<% end %>


# Checking if ES is ready
es_wait_for_ready "${ES_URL}" "${ES_CONFIG_AUTH}" 5 "10m"
RCODE=$?
[ ${RCODE} != 0 ] && exit ${RCODE}


# license
<% if_p("es_config.license") do |license| %>
TMP_CONTENT=$(mktemp)
cat <<EOF > ${TMP_CONTENT}
<%= license %>
EOF
es_update_license "${ES_URL}" "${ES_CONFIG_AUTH}" "${TMP_CONTENT}"
RCODE=$?
rm -f ${TMP_CONTENT}
[ ${RCODE} != 0 ] && exit ${RCODE}
<% end %>


# Templates
<% if_p("es_config.templates") do |templates| %>
  <% templates.each do |template| %>
    <% key, content = template.to_a.first %>
    <% if nil == content || content == '' %>
#  Deleting <%= key %>
es_delete_template "${ES_URL}" "${ES_CONFIG_AUTH}" "<%= key %>"
RCODE=$?
[ ${RCODE} != 0 ] && exit ${RCODE}
    <% else %>
#  Adding <%= key %>: <%= content %>
      <% if content.start_with? '/var/vcap' %>
es_add_template "${ES_URL}" "${ES_CONFIG_AUTH}" "<%= key %>" "<%= content %>"
RCODE=$?
      <% else %>
TMP_CONTENT=$(mktemp)
cat <<EOF > ${TMP_CONTENT}
<%= content %>
EOF
es_add_template "${ES_URL}" "${ES_CONFIG_AUTH}" "<%= key %>" "${TMP_CONTENT}"
RCODE=$?
rm -f ${TMP_CONTENT}
      <% end %>
[ ${RCODE} != 0 ] && exit ${RCODE}
    <% end %>
  
  <% end %>
<% end %>

exit 0

